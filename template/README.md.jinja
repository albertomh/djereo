# {{project_name}}

## Prerequisites

To use `{{project_name}}` the following must be available locally:

- [Python {{python_version}}](https://docs.python.org/{{python_version}}/) or above
- [Postgres](https://www.postgresql.org/download/)
- [uv](https://docs.astral.sh/uv/)
- [just](https://github.com/casey/just)

## Quickstart: run locally

A `justfile` defines common development tasks. Run `just` to show all available recipes.

```sh
# 1/5 create a postgres user and database for your project - change 'password' below
psql -U $(whoami) -d postgres -v APP_USER_PASSWORD='password' -f _db/set_up.sql

# 2/5 update the {password} in the DATABASE_URL connection strings in both .env & .env.test
# The .env file is created for you as a post-creation task.

# 3/5 apply migrations to the database
just manage migrate

# 4/5 create three users: admin, staff and regular (non-privileged)
just manage seed_database

# 5/5 install dependencies in a virtual environment and run the Django development server
just runserver
```

IPython is available as the default shell. Start an interactive session with:

```sh
just shell
```

## Develop

### Development prerequisites

In addition to the [Prerequisites](#prerequisites) above, you will need the following to
develop `{{project_name}}`:

- [pre-commit](https://pre-commit.com/)

### Style

Code style is enforced by pre-commit hooks.

```sh
# before you start developing, install pre-commit hooks
pre-commit install
```

See [Git principles](docs/README-dev.md#git-principles) & [Style](docs/README-dev.md#style)
in the developer README for more.

### Dependency management

Dependencies are defined in the `pyproject.toml` file, with exact versions captured by a
`uv.lock` lockfile. `uv` is used to manage dependencies:

```sh
# add a dependency to the project
uv add some-package
```
{%if is_github_project%}
Dependabot is configured to run weekly and update Python packages (minor & patch) and
GitHub Actions. See [.github/dependabot.yaml](.github/dependabot.yaml).
{%endif%}
### Logging

`{{project_name}}` uses [structlog](https://www.structlog.org/en/stable/) when DEBUG is
False. This configuration is intended for deployed environments such as production. When
DEBUG is True, as it usually is when developing locally, `rich` is used to format logs.
The logging configuration is generated by `logging.LoggingConfigFactory`.

You may issue logs as follows:

```python
import logging

logger = logging.getLogger(__name__)
logger.info("{{project_name}} is running", key="value")
```

### Models

The core app (`{{project_name}}`) defines an `UuidModel` abstract model. Models that
subclass it will have primary keys that are UUIDs instead of the default `BigAutoField`.
Models in the 'users' app extend `UuidModel` and it can be used by any new models.

## Test

Django's test runner (using the standard library's `unittest`) is used for the suite of
unit tests. Run all tests and report on code coverage:

```sh
just test [<expression>]

# eg. to only run tests inside the `test_migrations` module
just test tests.test_migrations
```
{%if is_github_project%}
## Release

[Release Please](https://github.com/googleapis/release-please) is used to automate:

- Updating the [changelog](CHANGELOG.md).
- Calculating the new SemVer tag based on conventional commit types.
- Creating a new GitHub release.

Release Please is configured as a GitHub action ([release-please.yaml](.github/workflows/release-please.yaml)).
It keeps a release pull request open that is refreshed as changes are merged into `main`.
To cut a release, simply merge the release pull request.

### GitHub Personal Access Token

In order for Release Please to automate the above process, a GitHub Actions secret called
`RELEASE_PLEASE_TOKEN` must exist in GitHub (under `github.com/<user>/<repo>/settings/secrets/actions`).
The contents of this secret must be a Personal Access Token (PAT) with the following permissions:

```text
contents: write
pull-requests: write
```

For more information, consult the [release-please-action project](https://github.com/googleapis/release-please-action).
{%endif%}
## Deploy `{{project_name}}`

The `_deploy/` directory includes a Dockerfile that uses the local development toolchain
(the `uv` project manager) to containerise the application.

### Deployment prerequisites

To deploy `{{project_name}}` the following must be available locally:

- [Docker](https://docs.docker.com/)

### Containerise the app

The Dockerfile runs pre-production steps, such as enabling bytecode compilation to trade a
longer installation time for faster start-up times, or running Django's `collectstatic`
command. The container's entrypoint runs [gunicorn](https://docs.gunicorn.org/en/latest/index.html)
as the WSGI web server to make the Django application available.

Build a deployment-ready image with:

```sh
docker build \
  --file _deploy/deploy.Dockerfile \
  --platform linux/amd64 \
  --build-arg CACHEBUST=$(date +%s) \
  --tag {{project_name}}:amd64 \
  --load .
```

NB. The `CACHEBUST` argument ensures the layer that runs `collectstatic` is not cached
between builds.

The recommended use of the resulting container is to place it behind [nginx](https://nginx.org/en/docs/index.html)
as the reverse proxy, with `gunicorn` as the WSGI web server between the two.

---

## Developer docs

The developer README ([docs/README-dev.md](docs/README-dev.md)) covers how to work on
`{{project_name}}` in more detail. It covers:

- [Development prerequisites](docs/README-dev.md#development-prerequisites)
- [The djereo project template](docs/README-dev.md#the-djereo-project-template)
- [Git principles](docs/README-dev.md#git-principles)
- [Justfile recipes](docs/README-dev.md#justfile-recipes)
- [Use IPython as your shell](docs/README-dev.md#use-ipython-as-your-shell)
- [Style & pre-commit hooks](docs/README-dev.md#style--pre-commit-hooks)
- [Managing settings](docs/README-dev.md#managing-settings)
- [Use project metadata in the running application](docs/README-dev.md#use-project-metadata-in-the-running-application)
- [Developer tools](docs/README-dev.md#developer-tools)
- [Upgrading](docs/README-dev.md#upgrading)
  - [Upgrade checklist](docs/README-dev.md#upgrade-checklist)
{%if is_github_project%}- [GitHub Actions](docs/README-dev.md#github-actions)
  - [Custom GitHub Actions](docs/README-dev.md#custom-github-actions)
  - [GitHub Actions workflows](docs/README-dev.md#github-actions-workflows)
    - [`PR` (pull request)](docs/README-dev.md#pr-pull-request)
    - [`CI` (continuous integration)](docs/README-dev.md#ci-continuous-integration)
    - [Release Please](docs/README-dev.md#release-please)
    - [Dependabot](docs/README-dev.md#dependabot)
{%endif%}
---

&copy; {{author_name}}
