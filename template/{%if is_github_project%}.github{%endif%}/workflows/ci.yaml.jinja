# Continuous Integration pipeline
# Runs when a Pull Request is merged into the 'main' branch.
#
# Does not run the 'containerise' job for merges of the 'release-please--branches--main'
# branch since this is handled by the `on-tag` workflow.
name: CI

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  checks:
    # this job is redundant if pipeline was triggered by merge of a 'Release Please' PR
    if: {% raw %}${{ github.event.pull_request.merged && github.head_ref != 'release-please--branches--main' }}{% endraw +%}
    uses: ./.github/workflows/_pre-build-checks.yaml

  containerise:
    # containerisation of tagged releases is handled separately by the `on-tag` workflow
    if: github.head_ref != 'release-please--branches--main'
    needs: checks
    runs-on: ubuntu-24.04
    outputs:
{% raw %}      image_address: ${{ steps.containerise.outputs.image_address }}{% endraw +%}
    steps:
      - uses: actions/checkout@v5
      - run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY@L}" >> $GITHUB_ENV
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - id: containerise
        uses: ./.github/actions/containerise
        with:
          dockerfile: _deploy/deploy.Dockerfile
          username: {% raw %}${{ github.actor }}{% endraw +%}
          password: {% raw %}${{ github.token }}{% endraw +%}
          tags:
{% raw %}            ghcr.io/${{ env.REPO_NAME }}/${{ github.ref_name }}:latest,{% endraw +%}
{% raw %}            ghcr.io/${{ env.REPO_NAME }}/${{ github.ref_name }}:${{ env.SHA_SHORT }},{% endraw +%}

  e2e_test:
    needs: containerise
    runs-on: ubuntu-24.04
    env:
      USE_ENV_TEST: "1"
      SECRET_KEY: django-insecure_not-a-secret
      ALLOWED_HOSTS: 127.0.0.1,::1
      CSRF_TRUSTED_ORIGINS: http://127.0.0.1
      DATABASE_URL: postgres://{{ project_name }}:password@host.docker.internal:5432/{{ project_name }}
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: {{ project_name }}
          POSTGRES_USER: {{ project_name }}
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.6.17"
      - name: Apply migrations and seed database
        run: |
          docker run --rm \
            --add-host=host.docker.internal:host-gateway \
            --env USE_ENV_TEST \
            --env SECRET_KEY \
            --env ALLOWED_HOSTS \
            --env CSRF_TRUSTED_ORIGINS \
            --env DATABASE_URL \
{% raw %}            ${{ needs.containerise.outputs.image_address }} \{% endraw +%}
            /bin/bash -c "python manage.py migrate && python manage.py seed_database"
      - name: Run webapp in the background
        run: |
          docker run --detach \
            --add-host=host.docker.internal:host-gateway \
            --env USE_ENV_TEST \
            --env SECRET_KEY \
            --env ALLOWED_HOSTS \
            --env CSRF_TRUSTED_ORIGINS \
            --env DATABASE_URL \
            --env PORT=8000 \
            --publish 8000:8000 \
            --volume {{ project_name }}_static:/app/static \
{% raw %}            ${{ needs.containerise.outputs.image_address }}{% endraw +%}
      - run: uv sync --group=test
      - run: uv run playwright install --with-deps chromium
      - run: uv run pytest tests_e2e/
