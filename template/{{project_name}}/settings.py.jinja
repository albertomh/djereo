"""
Django settings for {{project_name}}.

Generated by djereo {{_commit}} based on Django {{django_version}}'s 'django-admin startproject'.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import sys
from pathlib import Path

import structlog
from environs import env

from {{project_name}}.logging import LoggingConfigFactory

# 0. Setup -------------------------------------------------------------------------------

IS_TESTING = "test" in sys.argv

if IS_TESTING:
    env.read_env(".env.test", recurse=False)
else:  # pragma: no cover
    env.read_env()

BASE_DIR = Path(__file__).resolve().parent.parent


# 1. Django Core Settings ----------------------------------------------------------------

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")
SECRET_KEY_FALLBACKS = env.list("SECRET_KEY_FALLBACKS", default=[])

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

INTERNAL_IPS = ["127.0.0.1", "::1"]

if DEBUG:  # pragma: no cover
    ALLOWED_HOSTS: list[str] = []
else:
    ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")


# Application definition

# When several applications provide different versions of the same resource (template,
# static file, management command, translation), the application listed first in
# INSTALLED_APPS has precedence.
# https://docs.djangoproject.com/en/5.1/ref/settings/#installed-apps
FIRST_PARTY_APPS = [
    "{{project_name}}.apps.{{project_name|title}}Config",
    "users.apps.UsersConfig",
]
if IS_TESTING:
    FIRST_PARTY_APPS += ["{{project_name}}.tests.test_app.apps.TestAppConfig"]
THIRD_PARTY_APPS = [
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    {% if use_htmx %}
    "django_htmx",
    {% endif %}
    "django_linear_migrations",
    "django_structlog",
    "django_version_checks",
    "whitenoise.runserver_nostatic",
]
CONTRIB_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
INSTALLED_APPS = FIRST_PARTY_APPS + THIRD_PARTY_APPS + CONTRIB_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    {% if use_htmx %}
    "django_htmx.middleware.HtmxMiddleware",
    {% endif %}
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]
if not DEBUG:
    MIDDLEWARE += [
        # structlog must be closest to Django ie. last in request phase, first in response
        "django_structlog.middlewares.RequestMiddleware",
    ]

ROOT_URLCONF = "{{project_name}}.urls"

logging_factory = LoggingConfigFactory(debug=DEBUG)
LOGGING = logging_factory.build()

if not DEBUG:
    structlog.configure(
        processors=[
            structlog.contextvars.merge_contextvars,
            structlog.stdlib.filter_by_level,
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.processors.UnicodeDecoder(),
            structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
        ],
        logger_factory=structlog.stdlib.LoggerFactory(),
        cache_logger_on_first_use=True,
    )

# The cached template loader is enabled when `DEBUG = False`
# <https://docs.djangoproject.com/en/stable/howto/deployment/checklist/#templates>
TEMPLATES = [
    # Look inside the `templates/` subdirectory of each Django app.
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "{{project_name}}.wsgi.application"

CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS")
if not DEBUG and "127.0.0.1" not in CSRF_TRUSTED_ORIGINS:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

SITE_ID = 1

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {"default": env.dj_db_url("DATABASE_URL")}


AUTH_USER_MODEL = "users.AuthUser"

AUTHENTICATION_BACKENDS = (
    # Needed to log in by username in Django admin, regardless of `django-allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `django-allauth` specific authentication methods, such as log in by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LOGIN_REDIRECT_URL = "index"
ACCOUNT_LOGOUT_REDIRECT_URL = "index"


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = BASE_DIR / "static"

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    }
    if IS_TESTING
    else {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TEST_RUNNER = "{{project_name}}.test.TestRunner"

# 2. Django Contrib Settings -------------------------------------------------------------


# 3. Third Party Settings ----------------------------------------------------------------

# https://github.com/adamchainz/django-version-checks#usage
VERSION_CHECKS = {
    "python": ">={{python_version}}",
    "postgresql": "~={{postgres_version}}.0",
}

# Only enable dev tools when in debug mode and tests are not running.
# Django changes DEBUG to False for tests, so can't rely on DEBUG alone.
ENABLE_DEBUG_TOOLS = DEBUG and not IS_TESTING
if ENABLE_DEBUG_TOOLS:  # pragma: no cover
    INSTALLED_APPS += [
        "django_browser_reload",
        "debug_toolbar",
    ]
    MIDDLEWARE += [
        "django_browser_reload.middleware.BrowserReloadMiddleware",
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]
    {% if use_htmx %}
    # ensure django-debug-toolbar works with htmx boosting
    DEBUG_TOOLBAR_CONFIG = {"ROOT_TAG_EXTRA_ATTRS": "hx-preserve"}
    {% endif %}

# django-allauth

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_LOGIN_METHODS = {"email"}


# 4. Project Settings --------------------------------------------------------------------
