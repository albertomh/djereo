{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Djereo docs djereo - a Django project template with opinionated tooling. Built on top of the pycliche template. Features Projects created using djereo include: A basic Python package and entrypoint, configured via a pyproject.toml . Dependencies managed via uv , using a uv.lock file for reproducible builds. IPython as the default shell. Simple configuration to enhance your logs with structlog . Ready-to-use dev tools: Django Debug Toolbar, django-browser-reload , runserver logs formatted using rich . Out-of-the-box code coverage reporting with coverage.py . Batteries-included pre-commit hook configuration to lint & format code, and run SAST. A justfile to enable using just as a task runner. ...and more! Optionally, for projects intended to be hosted on GitHub, also include: GitHub Actions to: Automate cutting releases via Release Please . Run pre-commit hooks and pytest as part of a Continuous Integration pipeline. A dependabot configuration to keep Python packages & GitHub Actions up to date. Starting a Python project? Try pycliche , the base djereo is built on, as your Python project template. If djereo sounds like a good foundation for your next project, explore the full list of features or get started with the instructions on the Quickstart page .","title":"Home"},{"location":"#welcome-to-the-djereo-docs","text":"djereo - a Django project template with opinionated tooling. Built on top of the pycliche template.","title":"Welcome to the Djereo docs"},{"location":"#features","text":"Projects created using djereo include: A basic Python package and entrypoint, configured via a pyproject.toml . Dependencies managed via uv , using a uv.lock file for reproducible builds. IPython as the default shell. Simple configuration to enhance your logs with structlog . Ready-to-use dev tools: Django Debug Toolbar, django-browser-reload , runserver logs formatted using rich . Out-of-the-box code coverage reporting with coverage.py . Batteries-included pre-commit hook configuration to lint & format code, and run SAST. A justfile to enable using just as a task runner. ...and more! Optionally, for projects intended to be hosted on GitHub, also include: GitHub Actions to: Automate cutting releases via Release Please . Run pre-commit hooks and pytest as part of a Continuous Integration pipeline. A dependabot configuration to keep Python packages & GitHub Actions up to date. Starting a Python project? Try pycliche , the base djereo is built on, as your Python project template. If djereo sounds like a good foundation for your next project, explore the full list of features or get started with the instructions on the Quickstart page .","title":"Features"},{"location":"develop/","text":"Djereo developer documentation Develop djereo 's source code can be found at https://github.com/albertomh/djereo . Development prerequisites In addition to the prerequisites listed in the Quickstart you will need the following to develop djereo : pre-commit Upgrading the pycliche version djereo is built on top of the pycliche Python project template. To update djereo to a newer version of pycliche : cd ~/Projects/djereo/ uvx copier update --skip-answered --trust [--vcs-ref=<TAG>] If the --vcs-ref flag is not specified, copier will use the latest pycliche tag. Using the pycliche repo as a git remote Alternatively, since djereo was started by cloning pycliche v2.10.0, the latest changes to pycliche may be brought in as follows: # ensure pycliche exists as an upstream remote repo git remote -v # expected output: # origin git@github.com:albertomh/djereo.git (fetch) # origin git@github.com:albertomh/djereo.git (push) # upstream git@github.com:albertomh/pycliche.git (fetch) # upstream git@github.com:albertomh/pycliche.git (push) # if not present, add pycliche as a remote git remote add upstream https://github.com:albertomh/pycliche.git # fetch the latest changes from pycliche git fetch upstream # merge pycliche changes into djereo # flag necessary since the repos' histories diverged git merge --allow-unrelated-histories upstream/<branch-or-tag> # resolve conflicts manually, if any # stage resolved changes and finish the merge with git commit Git principles This repo follows trunk-based development. This means: the main branch should always be in a releasable state use short-lived feature branches Please follow the Conventional Commits guidelines when writing commit messages. commitlint is enabled as pre-commit hook. Valid commit types are defined in .commitlintrc.ts . N.B. The phrase \"gen. project\" is used frequently in commit messages. It means \"generated project\", i.e. the repository created by invoking copier with the djereo template as documented in the Quickstart . Dependency management Dependencies are defined in the pyproject.toml file. uv is used to manage dependencies: # add a dependency to the project uv add some-package Updating dependencies in the template There are two places where dependencies are currently declared in the template: .pre-commit-config.yaml.jinja pyproject.toml.jinja Update git hooks in the former via: cd template/ && pre-commit autoupdate Update Python packages in the latter manually. Automated option pending on account of commands like uv lock --upgrade-package not taking kindly to Jinja templates. Generate project using development version When developing djereo it is useful to observe the outcome of generating new projects that use in-progress features. To do so: # navigate to the parent directory of your local copy of djereo cd .. # vcs-ref flag to use the latest local version of djereo instead of a tagged version uvx copier copy --vcs-ref=HEAD djereo $TEST_PROJECT_NAME Style Code style is enforced by pre-commit hooks. Linter rules are configured in the ruff tables in pyproject.toml . # before you start developing, install pre-commit hooks pre-commit install # update pre-commit hooks pre-commit autoupdate Docstrings should follow the conventions set out in the Google styleguide . Upgrade checklist Check Django releases and update the django_version question in copier.yaml . Test Run all tests using pytest with: just test Tests have marks, allowing you to run only a subset: just test -m unit # or just test -m \"not smoke\" See the tool.pytest.ini_options table in pyproject.toml for a list of all marks. Document djereo 's documentation is published as a static site generated using mkdocs . Source markdown and configuration live in the docs/ directory. The docs are styled using the readthedocs theme. A custom GitHub action ( .github/actions/publish-docs ) builds the mkdocs site and publishes it to the gh-pages branch. Changes to this branch are automatically deployed to https://albertomh.github.io/djereo/ . Release Release Please is used to automate: Updating the changelog . Calculating the new SemVer tag based on conventional commit types. Creating a new GitHub release. Release Please is configured as a GitHub action ( release-please.yaml ). It keeps a release pull request open that is refreshed as changes are merged into main . To cut a release, simply merge the release pull request. GitHub Personal Access Token In order for Release Please to automate the above process, a GitHub Actions secret called DJEREO_RELEASE_PLEASE_TOKEN must exist in GitHub ( albertomh/djereo/settings/secrets/actions ). The contents of this secret must be a Personal Access Token (PAT) with the following permissions: contents: write pull-requests: write For more information, consult the release-please-action project ).","title":"Developer docs"},{"location":"develop/#djereo-developer-documentation","text":"","title":"Djereo developer documentation"},{"location":"develop/#develop","text":"djereo 's source code can be found at https://github.com/albertomh/djereo .","title":"Develop"},{"location":"develop/#development-prerequisites","text":"In addition to the prerequisites listed in the Quickstart you will need the following to develop djereo : pre-commit","title":"Development prerequisites"},{"location":"develop/#upgrading-the-pycliche-version","text":"djereo is built on top of the pycliche Python project template. To update djereo to a newer version of pycliche : cd ~/Projects/djereo/ uvx copier update --skip-answered --trust [--vcs-ref=<TAG>] If the --vcs-ref flag is not specified, copier will use the latest pycliche tag.","title":"Upgrading the pycliche version"},{"location":"develop/#using-the-pycliche-repo-as-a-git-remote","text":"Alternatively, since djereo was started by cloning pycliche v2.10.0, the latest changes to pycliche may be brought in as follows: # ensure pycliche exists as an upstream remote repo git remote -v # expected output: # origin git@github.com:albertomh/djereo.git (fetch) # origin git@github.com:albertomh/djereo.git (push) # upstream git@github.com:albertomh/pycliche.git (fetch) # upstream git@github.com:albertomh/pycliche.git (push) # if not present, add pycliche as a remote git remote add upstream https://github.com:albertomh/pycliche.git # fetch the latest changes from pycliche git fetch upstream # merge pycliche changes into djereo # flag necessary since the repos' histories diverged git merge --allow-unrelated-histories upstream/<branch-or-tag> # resolve conflicts manually, if any # stage resolved changes and finish the merge with git commit","title":"Using the pycliche repo as a git remote"},{"location":"develop/#git-principles","text":"This repo follows trunk-based development. This means: the main branch should always be in a releasable state use short-lived feature branches Please follow the Conventional Commits guidelines when writing commit messages. commitlint is enabled as pre-commit hook. Valid commit types are defined in .commitlintrc.ts . N.B. The phrase \"gen. project\" is used frequently in commit messages. It means \"generated project\", i.e. the repository created by invoking copier with the djereo template as documented in the Quickstart .","title":"Git principles"},{"location":"develop/#dependency-management","text":"Dependencies are defined in the pyproject.toml file. uv is used to manage dependencies: # add a dependency to the project uv add some-package","title":"Dependency management"},{"location":"develop/#updating-dependencies-in-the-template","text":"There are two places where dependencies are currently declared in the template: .pre-commit-config.yaml.jinja pyproject.toml.jinja Update git hooks in the former via: cd template/ && pre-commit autoupdate Update Python packages in the latter manually. Automated option pending on account of commands like uv lock --upgrade-package not taking kindly to Jinja templates.","title":"Updating dependencies in the template"},{"location":"develop/#generate-project-using-development-version","text":"When developing djereo it is useful to observe the outcome of generating new projects that use in-progress features. To do so: # navigate to the parent directory of your local copy of djereo cd .. # vcs-ref flag to use the latest local version of djereo instead of a tagged version uvx copier copy --vcs-ref=HEAD djereo $TEST_PROJECT_NAME","title":"Generate project using development version"},{"location":"develop/#style","text":"Code style is enforced by pre-commit hooks. Linter rules are configured in the ruff tables in pyproject.toml . # before you start developing, install pre-commit hooks pre-commit install # update pre-commit hooks pre-commit autoupdate Docstrings should follow the conventions set out in the Google styleguide .","title":"Style"},{"location":"develop/#upgrade-checklist","text":"Check Django releases and update the django_version question in copier.yaml .","title":"Upgrade checklist"},{"location":"develop/#test","text":"Run all tests using pytest with: just test Tests have marks, allowing you to run only a subset: just test -m unit # or just test -m \"not smoke\" See the tool.pytest.ini_options table in pyproject.toml for a list of all marks.","title":"Test"},{"location":"develop/#document","text":"djereo 's documentation is published as a static site generated using mkdocs . Source markdown and configuration live in the docs/ directory. The docs are styled using the readthedocs theme. A custom GitHub action ( .github/actions/publish-docs ) builds the mkdocs site and publishes it to the gh-pages branch. Changes to this branch are automatically deployed to https://albertomh.github.io/djereo/ .","title":"Document"},{"location":"develop/#release","text":"Release Please is used to automate: Updating the changelog . Calculating the new SemVer tag based on conventional commit types. Creating a new GitHub release. Release Please is configured as a GitHub action ( release-please.yaml ). It keeps a release pull request open that is refreshed as changes are merged into main . To cut a release, simply merge the release pull request.","title":"Release"},{"location":"develop/#github-personal-access-token","text":"In order for Release Please to automate the above process, a GitHub Actions secret called DJEREO_RELEASE_PLEASE_TOKEN must exist in GitHub ( albertomh/djereo/settings/secrets/actions ). The contents of this secret must be a Personal Access Token (PAT) with the following permissions: contents: write pull-requests: write For more information, consult the release-please-action project ).","title":"GitHub Personal Access Token"},{"location":"featurelist/","text":"Djereo's features","title":"Djereo's features"},{"location":"featurelist/#djereos-features","text":"","title":"Djereo's features"},{"location":"quickstart/","text":"Quickstart This section covers how to create a Django project using djereo as a template. Prerequisites The following must be available locally: Python 3.10 or above uv Bootstrap a new Django project Navigate to the directory under which you wish to create a new project. Run uvx copier copy --trust gh:albertomh/djereo <project_name> and follow the wizard. This creates a directory under your current location. Follow the README in the new <project_name>/ directory to get started with your project. Please note: it is not necessary to clone djereo . The gh:albertomh/djereo argument will pull the latest tag from GitHub. the --trust flag is necessary to allow a post-creation task to initialise the new directory as a git repository and generate a uv lockfile. Update existing projects To update a project created using an older version of djereo to a newer version of the template: cd ~/Projects/existing_project/ uvx copier update --skip-answered --trust [--vcs-ref=<TAG>] If the --vcs-ref flag is not specified copier will use the latest djereo tag.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"This section covers how to create a Django project using djereo as a template.","title":"Quickstart"},{"location":"quickstart/#prerequisites","text":"The following must be available locally: Python 3.10 or above uv","title":"Prerequisites"},{"location":"quickstart/#bootstrap-a-new-django-project","text":"Navigate to the directory under which you wish to create a new project. Run uvx copier copy --trust gh:albertomh/djereo <project_name> and follow the wizard. This creates a directory under your current location. Follow the README in the new <project_name>/ directory to get started with your project. Please note: it is not necessary to clone djereo . The gh:albertomh/djereo argument will pull the latest tag from GitHub. the --trust flag is necessary to allow a post-creation task to initialise the new directory as a git repository and generate a uv lockfile.","title":"Bootstrap a new Django project"},{"location":"quickstart/#update-existing-projects","text":"To update a project created using an older version of djereo to a newer version of the template: cd ~/Projects/existing_project/ uvx copier update --skip-answered --trust [--vcs-ref=<TAG>] If the --vcs-ref flag is not specified copier will use the latest djereo tag.","title":"Update existing projects"}]}